lb3:
переделать логику таким образом, чтобы была прослойка между наблюдателем и бизнес-логикой(контролер логгеров???).
т.е. добавить класс LoggerPoll, объект которого будет хранить список всех логгеров в программе, обладать методами подписаться, отписаться, уведомить(вариант для каждого класса наблюдаемого объекта).
ex. notify(Creature &creature, std::string msg, Log::LogLevel lvl);
должны быть реализованы паттерны observer + singleton(for loggerpoll)


lb4: 
параметризация шаблонного класса игры любым количесвтом параметров, задающих правила игры. сами правила не должны бить шаблоны ради шаблонов.

lb5:
создать метод, позволяющий задать клавиши управления при старте.
сделатьуправление в рантайме(ncurses)???
контроллер не должен заниматься считыванием/ записью клавиш, должен быть создан отдельный класс, обладающий интерфейсом добавления клавиш для управления ировым процессом.
конктроллер не должен производить считывание клавиш, вынести это в отдельный класс, в идеале - должен быть создан интерфейс, который получая на вход направление двиэения, выполняет передвижения сущности на игровом поле (а вообще, Андрюха сказал, что мой контроллер занимается сразу 3 вещами одновременно, это нехорошо, на каждую вещь отдельный набор классов бизнес-логики)
метод move()  возвращающий строку - смешно:))

lb6:
я не помню, почему он поставил мне не фулл балл, но точно могу сказать, что сама идея - недостаточно продуманная, хоть и доведена до результата. было бы круто прикрутить туда паттерн мементо. так же надо пересмотреть связи в uml  диаграмме, они недостаточно корректные(агрегация/композиция к классе game).
